# -*- coding: utf-8 -*-
"""diabetes prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1epl8dCynxw-dLEl7KgNpRchdxqfTmqt7
"""

!pip install openml

import openml
import pandas as pd

# Load diabetes dataset from OpenML (ID: 37)
diabetes = openml.datasets.get_dataset(37)
df, *_ = diabetes.get_data()

print("First five rows of the dataset:")
print(df.head())

# Rename target column for clarity
df.rename(columns={'class': 'diabetes'}, inplace=True)

# Encode target: tested_positive = 1, tested_negative = 0
df['diabetes'] = df['diabetes'].map({'tested_positive': 1, 'tested_negative': 0})

# Check for missing values
print("\nMissing values:\n", df.isnull().sum())

import seaborn as sns
import matplotlib.pyplot as plt

# Correlation Heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

# Count of diabetes cases
sns.countplot(x='diabetes', data=df)
plt.title("Diabetes Class Distribution")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Features and target split
X = df.drop('diabetes', axis=1)
y = df['diabetes']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Predict
y_pred = model.predict(X_test_scaled)

# Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Plot Feature Importance
import numpy as np

features = X.columns
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]

plt.figure(figsize=(10, 6))
sns.barplot(x=importances[indices], y=features[indices])
plt.title("Feature Importance")
plt.xlabel("Importance Score")
plt.ylabel("Features")
plt.show()

